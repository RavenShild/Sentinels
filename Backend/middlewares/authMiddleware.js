const jwt = require("jsonwebtoken");

const SECRET = "seuSegredoSuperSecreto"; // 丘멆잺 O ideal 칠 armazenar em uma vari치vel de ambiente segura

function verificarPermissao(allowedRoles) {
    return (req, res, next) => {
        const authHeader = req.headers["authorization"];
        if (!authHeader) {
            console.log("Token n칚o fornecido"); // Log para depura칞칚o
            return res.status(403).json({ error: "Token n칚o fornecido" });
        }

        const token = authHeader.split(" ")[1];
        if (!token) {
            console.log("Token inv치lido"); // Log para depura칞칚o
            return res.status(403).json({ error: "Token inv치lido" });
        }

        jwt.verify(token, SECRET, (err, decoded) => {
            if (err) {
                console.log("Erro ao verificar token:", err);
                return res.status(401).json({ error: "Token inv치lido" });
            }

            console.log("Token decodificado:", decoded); // Verifica o que h치 dentro do token

            if (!decoded.id) {
                return res.status(403).json({ error: "Usu치rio sem ID no token" });
            }

            if (!allowedRoles.includes(decoded.role)) {
                return res.status(403).json({ error: "Acesso negado" });
            }

            req.user = { id: decoded.id, role: decoded.role }; // 游댳 Agora `req.user.id` estar치 acess칤vel
            next();
        });
    };
}

module.exports = verificarPermissao;
